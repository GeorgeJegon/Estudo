SCIP - Capítulo 1

Ex 1.1 - Below is a sequence of expressions. What is the result printed by the interpreter in response to each expression?
Assume that the sequence is to be evaluated in the order in which it is presented.

10 -> 10
(+ 5 3 4) -> 12
(- 9 1) -> 8
(/ 6 2) -> 3
(+ (* 2 4) (- 4 6)) -> 6
(define a 3) -> Value: a
(define b (+ a 1)) -> Value: b
(+ a b (* a b)) -> 19
(= a b) -> #f (ou false)
(if (and (> b a) (< b (* a b))) b a) -> 4 (ou b)
(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else 25)) -> 16
(+ 2 (if (> b a) b a)) -> 6
(*
  (cond
    ((> a b) a)
    ((< a b) b)
    (else -1)
  )
  (+ a 1)
) -> 16

Ex 1.2 - Translate the following expression into prefix form:
(5 + 4 + (2 - (3 - (6 + 4/5))))/(3*(6 - 2) * (2 - 7)) ->

(/
  (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5)))))
  (* 3 (- 6 2) (- 2 7))
) -> -37/150 (ou -0.24666666666)

Ex 1.3 - Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers.
(define (square x) (* x x))
(define (sum-of-three x y z) (+ (square (if (>= x y) x y)) (square (if (>= y z) y z))))

e.g:
  (sum-of-three 1 2 3) -> 13
  (sum-of-three 1 1 1) -> 2
  (sum-of-three 1 2 2) -> 8
  (sum-of-three 1 1 2) -> 5

Ex 1.4 - Observe that our model of evaluation allows for combinations whose operators are compound expressions.
Use this observation to describe the behavior of the following procedure:
(define
  (a-plus-abs-b a b)
  ((if (> b 0) + -) a b)
)

Nessa procedure se o valor de "b" não for maior do que 0 então vamos fazer "a - b", caso contrário a conta será "a + b".
Fazendo assim com que o valor de "b" utilizado na operação seja o valor absoluto
e.g:
    (a-plus-abs-b 2 3)
    ((if (> 3 0) + -) 2 3)
     (+ 2 3) -> 5
    --------------------------
    (a-plus-abs-b 2 0)
    ((if (> 0 0) + -) 2 0)
    (- 2 0) -> 2
    --------------------------
    (a-plus-abs-b 2 -3)
    ((if (> -3 0) + -) 2 -3)
    (- 2 -3) -> 5

Ex 1.5 - Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative order
evaluation or normal-order evaluation. He defines the following two procedures:
  (define (p) (p))
  (define (test x y) (if (= x 0) 0 y))

Then he evaluates the expression:
(test 0 (p))

Usando Applicative Order:
(test 0 (p))
(test 0 (p))
(test 0 (p)) ... infinte recursion

Usando Normal Order:
(test 0 (p))
(if (= 0 0) 0 (p)) -> 0

